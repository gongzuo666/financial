{
  "uid" : "74ccf9d22f90d639",
  "name" : "账套添加",
  "fullName" : "test_ledger.TestLesson#test_add_ledger",
  "historyId" : "7213fbab2e9558791faa347809ebc33a",
  "time" : {
    "start" : 1604555730077,
    "stop" : 1604555730096,
    "duration" : 19
  },
  "description" : "用例描述：账套新增接口",
  "descriptionHtml" : "<p>用例描述：账套新增接口</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 4001 == 4002\n +  where 4001 = int('4001')",
  "statusTrace" : "self = <testCase.test_ledger.TestLesson object at 0x0000000004996080>\ninData = '{\"packageName\": \"\", \"createMouth\": 202011, \"loginAcc\": \"xizang\", \"loginPwd\": \"123456as\", \"confirmPwd\": \"123456as\"}'\nrepsData = '{\"code\": 4002}'\n\n    @allure.story('新增账套')\n    @allure.title('账套添加')\n    @pytest.mark.parametrize('inData,repsData', get_yaml_data())\n    def test_add_ledger(self,inData,repsData):\n        '''用例描述：账套新增接口'''\n        step_1()\n        res = LedgerClass().add_ledger(self.token, inData)\n        step_2()\n>       assert int(res['code']) == json.loads(repsData)['code']\nE       AssertionError: assert 4001 == 4002\nE        +  where 4001 = int('4001')\n\ntest_ledger.py:36: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1604555730005,
      "stop" : 1604555730034,
      "duration" : 29
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "description" : "用例描述：账套新增接口",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 4001 == 4002\n +  where 4001 = int('4001')",
    "statusTrace" : "self = <testCase.test_ledger.TestLesson object at 0x0000000004996080>\ninData = '{\"packageName\": \"\", \"createMouth\": 202011, \"loginAcc\": \"xizang\", \"loginPwd\": \"123456as\", \"confirmPwd\": \"123456as\"}'\nrepsData = '{\"code\": 4002}'\n\n    @allure.story('新增账套')\n    @allure.title('账套添加')\n    @pytest.mark.parametrize('inData,repsData', get_yaml_data())\n    def test_add_ledger(self,inData,repsData):\n        '''用例描述：账套新增接口'''\n        step_1()\n        res = LedgerClass().add_ledger(self.token, inData)\n        step_2()\n>       assert int(res['code']) == json.loads(repsData)['code']\nE       AssertionError: assert 4001 == 4002\nE        +  where 4001 = int('4001')\n\ntest_ledger.py:36: AssertionError",
    "steps" : [ {
      "name" : "步骤1:填写请求参数:inData,提交后返回实际结果",
      "time" : {
        "start" : 1604555730078,
        "stop" : 1604555730078,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "步骤2:对比实际结果与预期结果:repsData",
      "time" : {
        "start" : 1604555730095,
        "stop" : 1604555730095,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1604555730184,
      "stop" : 1604555730184,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "账套管理"
  }, {
    "name" : "story",
    "value" : "新增账套"
  }, {
    "name" : "suite",
    "value" : "test_ledger"
  }, {
    "name" : "subSuite",
    "value" : "TestLesson"
  }, {
    "name" : "host",
    "value" : "SKY-20170828DBR"
  }, {
    "name" : "thread",
    "value" : "4968-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_ledger"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "inData",
    "value" : "'{\"packageName\": \"\", \"createMouth\": 202011, \"loginAcc\": \"xizang\", \"loginPwd\": \"123456as\", \"confirmPwd\": \"123456as\"}'"
  }, {
    "name" : "repsData",
    "value" : "'{\"code\": 4002}'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "74ccf9d22f90d639.json",
  "parameterValues" : [ "'{\"packageName\": \"\", \"createMouth\": 202011, \"loginAcc\": \"xizang\", \"loginPwd\": \"123456as\", \"confirmPwd\": \"123456as\"}'", "'{\"code\": 4002}'" ]
}